#!/usr/bin/env python

"""hountdog - your security web hunter.

Usage:
  hounddog scan <url> [--debug]
  hounddog -h | --help 
  hounddog -v | --version

Options:
  -h --help  Show this help.
  -v --version  Show the version.

"""

from docopt import docopt
import requests
import logging
import coloredlogs
import string
import random
import urllib3

def id_generator(size=6, chars=string.ascii_uppercase +string.ascii_lowercase+ string.digits):
  return ''.join(random.choice(chars) for _ in range(size))

def check_for_webserver_technology(url="http://localhost"):
  r = requests.get(url, headers=headers, verify=False)

  # logger.debug(r.headers)
  if 'server' in r.headers:
    logger.debug(r.headers['server'])
  else:
    logger.debug("No server in HTTP response headers")

  if 'Access-Control-Allow-Methods' in r.headers:
    logger.debug(r.headers['Access-Control-Allow-Methods'])
    methods = r.headers['Access-Control-Allow-Methods'].lower().split(",")
    if "put" in methods:
      logger.error("Dangerous HTTP method found: PUT")
    if "delete" in methods:
      logger.error("Dangerous HTTP method found: DELETE")

  r = requests.options(url, headers=headers, verify=False)
  logger.debug(r)
  

def check_for_404_status_code(url="http://localhost"):
  # Asking for a nonexistent page

  ne_page = id_generator(64) + ".html"
  logger.debug("asking for non existent page @ %s", url+'/'+ne_page)

  r = requests.get(url+'/'+ne_page, headers=headers, verify=False)
  if len(r.history) > 0:
    logger.debug("a redirect was found to %s: %d - %d - %d", r.url, r.status_code, r.history[0].status_code, len(r.history))
    logger.error("target url is not serving me a 404 page. Enumeration will be unreliable")
    return -1
  else:
    logger.debug("page: %s returned %d", r.url, r.status_code)
    ne_code=r.status_code

  # SSL verification bypass must be a config option
  r = requests.get(url, headers=headers, verify=False)

  if len(r.history) > 0:
    logger.debug("a redirect was found to %s: %d - %d - %d", r.url, r.status_code, r.history[0].status_code, len(r.history))
  else:
    logger.debug("page: %s returned %d", r.url, r.status_code)
  
  if (r.status_code != ne_code):
    logger.info("status code is different if the page doesn't exist. Good")
    return 0
 
  return -2
   

def scan(args):
  url = args['<url>'].rstrip()

  logger.info("Testing %s", url)
  check_for_webserver_technology(url)
  check_for_404_status_code(url)




def hound():
  arguments  = docopt(__doc__, options_first=True, version="0.0.1")
  
  logger = logging.getLogger(__name__)
  coloredlogs.install(level='DEBUG', logger=logger, fmt="%(asctime)s [%(levelname)8s] - %(message)s")

  print(arguments)
  scan(arguments)



if __name__ == '__main__':

  print("      / \___        ")
  print("     (    - \___    \t{0.0.1}")
  print("    /           O")
  print("   /    (______/")
  print("  /____/\t\tHOUNDDOG - your web hunter")            



  # This should really go out in the future
  urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

  headers = {
      'User-Agent': 'hounddog 1.0'
  }
  
  hound()

